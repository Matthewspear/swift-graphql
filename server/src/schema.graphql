scalar DateTime

type Query {
  """
  Simple query that says "Hello World!".
  """
  hello: String!

  """
  A query that returns a value only when user is authenticated.
  """
  secret: String

  """
  A query that echos the selected enumerator back to the client.
  """
  oneOf(option: Option!): Option!

  """
  A sample list of random strings.
  """
  list: [String!]!

  """
  Query that returns the current date.
  """
  date: DateTime
}

enum Option {
  ONE
  TWO
  THREE
}

type Mutation {
  """
  A mutation that returns the token that may be used to authenticate the user.
  """
  login(name: String!): AuthPayload!

  """
  A sample mutation that mimics a complex form and returns a
  """
  form(params: FormParams!): Human!
}

input FormParams {
  name: String!
  master: String
  age: Int!
}

interface Human {
  name: String!
}

type Master implements Human {
  name: String!
  age: Int!
}

type Padawan implements Human {
  name: String!
  age: Int!
  master: Master!
}

type AuthPayloadSuccess {
  token: String!
  name: String!
}

type AuthPayloadFailure {
  message: String!
}

union AuthPayload = AuthPayloadSuccess | AuthPayloadFailure

type Subscription {
  """
  A query that counts from a given value up/down to (excluding) target value.
  """
  count(from: Int!, to: Int!): Int!

  """
  Countsdown from a given value to (including) 0 if you are authenticated.
  """
  secret(from: Int!): Int!
}
